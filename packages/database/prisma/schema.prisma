generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(PROPERTY_OWNER)
  kennitala String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  managedHAs     HouseAssociation[]
  memberships    HAMembership[]
  announcements  Announcement[]
  messages       Message[]

  @@map("users")
}

model HouseAssociation {
  id               String   @id @default(cuid())
  name             String
  address          String
  registrationNum  String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relationships
  manager          User     @relation(fields: [managerId], references: [id])
  managerId        String
  members          HAMembership[]
  documents        Document[]
  announcements    Announcement[]
  meetings         Meeting[]

  @@map("house_associations")
}

model HAMembership {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  ha     HouseAssociation @relation(fields: [haId], references: [id])
  haId   String
  
  @@unique([userId, haId])
  @@map("ha_memberships")
}

model Document {
  id               String           @id @default(cuid())
  title            String
  description      String?
  filePath         String
  mimeType         String
  size             Int
  uploadedAt       DateTime         @default(now())
  houseAssociation HouseAssociation @relation(fields: [haId], references: [id])
  haId             String

  @@map("documents")
}

model Announcement {
  id               String           @id @default(cuid())
  title            String
  content          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  author           User             @relation(fields: [authorId], references: [id])
  authorId         String
  houseAssociation HouseAssociation @relation(fields: [haId], references: [id])
  haId             String

  @@map("announcements")
}

model Meeting {
  id               String           @id @default(cuid())
  title            String
  description      String?
  scheduledAt      DateTime
  location         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  houseAssociation HouseAssociation @relation(fields: [haId], references: [id])
  haId             String

  @@map("meetings")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String

  @@map("messages")
}

enum UserRole {
  HA_MANAGER
  PROPERTY_OWNER
}